// CodeGear C++Builder
// Copyright (c) 1995, 2021 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'FMX.ZOrder.pas' rev: 34.00 (iOSSIM)

#ifndef Fmx_ZorderHPP
#define Fmx_ZorderHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Types.hpp>
#include <System.SysUtils.hpp>
#include <System.Generics.Collections.hpp>
#include <FMX.Controls.hpp>
#include <FMX.Forms.hpp>
#include <FMX.Types.hpp>
#include <System.Generics.Defaults.hpp>

//-- user supplied -----------------------------------------------------------

namespace Fmx
{
namespace Zorder
{
//-- forward type declarations -----------------------------------------------
template<typename T> class DELPHICLASS TCustomZOrderManager__1;
//-- type declarations -------------------------------------------------------
#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TCustomZOrderManager__1 : public System::TObject
{
	typedef System::TObject inherited;
	
	
private:
	#pragma pack(push,8)
	// Template declaration generated by Delphi parameterized types is
	// used only for accessing Delphi variables and fields.
	// Don't instantiate with new type parameters in user code.
	struct DECLSPEC_DRECORD TViewInfo
	{
	public:
		T View;
		T ChildrenView;
		__fastcall TViewInfo(const T AView, const T AChildrenView);
		TViewInfo() {}
	};
	#pragma pack(pop)
	
	
	
private:
	System::Generics::Collections::TDictionary__2<Fmx::Controls::TControl*,TViewInfo>* FLinks;
	Fmx::Types::TWindowHandle* FOwner;
	bool __fastcall HasParent(const T AView);
	bool __fastcall FindChildrenViewForControl(Fmx::Controls::TControl* const AControl, /* out */ T &AView);
	bool __fastcall CanBeVisibleOnScreen(Fmx::Controls::TControl* const AControl);
	
protected:
	bool __fastcall FindForm(Fmx::Controls::TControl* const AControl, /* out */ Fmx::Forms::TCommonCustomForm* &AForm);
	bool __fastcall HasParentView(Fmx::Controls::TControl* const AControl)/* overload */;
	bool __fastcall FindView(Fmx::Controls::TControl* const AControl, /* out */ T &AView);
	bool __fastcall FindChildrenView(Fmx::Controls::TControl* const AControl, /* out */ T &AView);
	bool __fastcall FindPreviousSiblingView(Fmx::Controls::TControl* const AControl, /* out */ T &AView);
	void __fastcall Reorder(const T AView, const T APreviousSiblingView);
	virtual T __fastcall GetParentView(const T AView) = 0 ;
	virtual void __fastcall RemoveFromParent(const T AChildView) = 0 ;
	virtual void __fastcall InsertSubview(const T AParent, const T AChildView, const T APreviousSiblingChildView) = 0 ;
	virtual int __fastcall IndexOfView(const T AView) = 0 ;
	virtual bool __fastcall IsFirstView(const T AView);
	virtual void __fastcall UpdateBounds(const T AView, Fmx::Controls::TControl* const AControl, const T AParentView) = 0 /* overload */;
	virtual void __fastcall UpdateVisible(const T AView, const bool AVisible) = 0 ;
	virtual T __fastcall GetFormView(Fmx::Forms::TCommonCustomForm* const AForm) = 0 ;
	virtual bool __fastcall SameView(const T AViewLeft, const T AViewRight) = 0 ;
	virtual T __fastcall NullView() = 0 ;
	
public:
	__fastcall TCustomZOrderManager__1(Fmx::Types::TWindowHandle* const AOwner);
	__fastcall virtual ~TCustomZOrderManager__1();
	void __fastcall AddOrSetLink(Fmx::Controls::TControl* const AControl, const T AView, const T AChildrenView);
	void __fastcall RemoveLink(Fmx::Controls::TControl* const AControl);
	void __fastcall RemoveLinksForControlTree(Fmx::Controls::TControl* const AControl);
	bool __fastcall FindParentNativeControl(Fmx::Controls::TControl* const AControl, /* out */ Fmx::Controls::TControl* &AParent);
	bool __fastcall FindParentView(Fmx::Controls::TControl* const AControl, /* out */ T &AView)/* overload */;
	bool __fastcall IsNativeParentForm(Fmx::Controls::TControl* const AControl);
	void __fastcall UpdateOrder(Fmx::Controls::TControl* const AControl);
	void __fastcall UpdateBounds(Fmx::Controls::TControl* const AControl)/* overload */;
	void __fastcall UpdateOrderAndBounds(Fmx::Controls::TControl* const AControl);
	__property Fmx::Types::TWindowHandle* Owner = {read=FOwner};
};

#pragma pack(pop)

//-- var, const, procedure ---------------------------------------------------
}	/* namespace Zorder */
}	/* namespace Fmx */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_FMX_ZORDER)
using namespace Fmx::Zorder;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_FMX)
using namespace Fmx;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Fmx_ZorderHPP
