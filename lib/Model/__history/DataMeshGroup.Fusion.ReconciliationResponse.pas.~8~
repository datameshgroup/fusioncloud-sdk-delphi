unit DataMeshGroup.Fusion.ReconciliationResponse;

interface

uses DataMeshGroup.Fusion.MessagePayload, DataMeshGroup.Fusion.Types,
  DataMeshGroup.Fusion.Response, System.Generics.Collections;

type
  TReconciliationResponse = class(TMessagePayload)
  private
    FResponse: TResponse;
    FReconciliationType: TReconciliationType;

    function CreateDefaultResponseMessagePayload(AResponse: TResponse):
      TMessagePayload; override;
  public
    property Response: TResponse read FResponse write FResponse;

    /// <summary>
    /// Type of Reconciliation requested by the Sale to the POI.
    /// </summary>
    property ReconciliationType: TReconciliationType read FReconciliationType
      write FReconciliationType;

    /// <summary>
    /// Identification of the reconciliation period between Sale and POI.
    /// </summary>
    property POIReconciliationID: string read FPOIReconciliationID
      write FPOIReconciliationID;

    /// <summary>
    /// Present if <see cref="Response"/> is Success. One set of totals per value of CardBrand and AcquirerID, ..., TotalsGroupID if presents
    /// </summary>
    public List<TransactionTotals> TransactionTotals { get; set; }


    public string TID { get; set; }
    public string MID { get; set; }
    public string AcquirerID { get; set; }

    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.IsoDateTimeConverter))]
    public DateTime? LastShiftTotalTime { get; set; }

    /// <summary>
    /// Builds a plain text version of the reconciliation receipt
    /// </summary>
    /// <returns>
    /// A plain text version of the receipt, or null if no values exist
    /// </returns>
    public string GetReceiptAsPlainText()
    {
        StringBuilder sb = new StringBuilder();

        _ = sb.AppendLine("Datamesh Terminal");
        _ = sb.AppendLine(GetEnumDescription(ReconciliationType).ToUpper());
        _ = sb.AppendLine();
        _ = sb.AppendLine(DateTime.Now.ToString("G"));
        _ = sb.AppendLine($"Merchant ID\t\t{MID}");
        _ = sb.AppendLine($"Terminal ID\t\t{TID}");
        _ = sb.AppendLine();
        if (LastShiftTotalTime != null)
        {
        _ = sb.AppendLine("Previous Reset");
        _ = sb.AppendLine(LastShiftTotalTime?.ToString("G"));
        _ = sb.AppendLine();
        }

        // TODO: populate receipt based on TransactionTotals

        return sb.ToString();
    }

    protected static string GetEnumDescription(Enum value)
    {
        FieldInfo fi = value.GetType().GetField(value.ToString());

        DescriptionAttribute[] attributes = fi.GetCustomAttributes(typeof(DescriptionAttribute), false) as DescriptionAttribute[];

        if (attributes != null && attributes.Any())
        {
        return attributes.First().Description;
        }

        return value.ToString();
    }


    constructor Create(AMessageClass: TMessageClass; AMessageCategory: TMessageCategory;
      AMessageType: TMessageType); override;
  end;

implementation

{ TReconciliationResponse }

constructor TReconciliationResponse.Create(AMessageClass: TMessageClass;
  AMessageCategory: TMessageCategory; AMessageType: TMessageType);
begin
  inherited;

end;

function TReconciliationResponse.CreateDefaultResponseMessagePayload(
  AResponse: TResponse): TMessagePayload;
begin

end;

end.


public Response  { get; set; }



    internal override MessagePayload CreateDefaultResponseMessagePayload(Response response)
    {
        throw new NotImplementedException();
    }