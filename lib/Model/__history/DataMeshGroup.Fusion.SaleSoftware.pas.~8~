unit DataMeshGroup.Fusion.SaleSoftware;

interface

uses Neon.Core.Attributes;

type
  TSaleSoftware = class
  private
    FProviderIdentification: string;
    FApplicationName: string;
    FSoftwareVersion: string;
    FCertificationCode: string;
    FComponentDescription: string;
    FComponentType: string;
  public
    property ProviderIdentification: string read FProviderIdentification
      write FProviderIdentification;
    property ApplicationName: string read FApplicationName
      write FApplicationName;
    property SoftwareVersion: string read FSoftwareVersion
      write FSoftwareVersion;
    property CertificationCode: string read FCertificationCode
      write FCertificationCode;

    [NeonInclude(IncludeIf.NotEmpty)]
    property ComponentDescription: string read FComponentDescription
      write FComponentDescription;

    [NeonInclude(IncludeIf.NotEmpty)]
    property ComponentType: string read FComponentType write FComponentType;

    /// <summary>
    /// Constructor will params for the required fields for SaleSoftware
    /// </summary>
    constructor Create(const AProviderIdentification: string;
      const AApplicationName: string; const ASoftwareVersion: string;
      const ACertificationCode: string);
  end;

implementation

{ TSaleSoftware }

constructor TSaleSoftware.Create(const AProviderIdentification,
  AApplicationName, ASoftwareVersion, ACertificationCode: string);
begin
  FProviderIdentification := AProviderIdentification;
  FApplicationName := AApplicationName;
  FSoftwareVersion := ASoftwareVersion;
  FCertificationCode := ACertificationCode;
end;

end.
