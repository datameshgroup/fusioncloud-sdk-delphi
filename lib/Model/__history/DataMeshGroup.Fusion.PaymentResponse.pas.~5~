unit DataMeshGroup.Fusion.PaymentResponse;

interface

uses DataMeshGroup.Fusion.MessagePayload, DataMeshGroup.Fusion.Types,
  DataMeshGroup.Fusion.Response, DataMeshGroup.Fusion.SaleData,
  DataMeshGroup.Fusion.POIData, DataMeshGroup.Fusion.PaymentResult;

type
  TPaymentResponse = class(TMessagePayload)
  private
    FResponse: TResponse;
    FPOIData: TPOIData;

    function CreateDefaultResponseMessagePayload(AResponse: TResponse):
      TMessagePayload; override;
  public
    property Response: TResponse read FResponse write FResponse;
    property SaleData: TSaleData read FSaleData write FSaleData;
    property POIData: TPOIData read FPOIData write FPOIData;
    property PaymentResult PaymentResult { get; set; }
    //property LoyaltyResult LoyaltyResult { get; set; }

    property List<PaymentReceipt> PaymentReceipt { get; set; }

    property CustomerOrder CustomerOrder { get; set; }

        /// <summary>
        /// Present if ErrorCondition is "PaymentRestriction". Consists of a list of product codes corresponding to products that are purchasable with the given card. Items that exist in the basket but do not belong to this list corresponds to restricted items.
        /// </summary>
        public List<string> AllowedProductCode { get; set; }

        /// <summary>
        /// Get a plain text version of the specified receipt type
        /// </summary>
        /// <returns>
        /// A plain text version of the receipt specified, or null if no such receipt exists
        /// </returns>
        public string GetReceiptAsPlainText(DocumentQualifier documentQualifier = DocumentQualifier.SaleReceipt)
        {
            return PaymentReceipt?.FirstOrDefault(r => r.DocumentQualifier == documentQualifier)?.OutputContent?.GetContentAsPlainText();
        }
    constructor Create(AMessageClass: TMessageClass; AMessageCategory: TMessageCategory;
      AMessageType: TMessageType); override;
  end;

implementation

{ TPaymentResponse }

constructor TPaymentResponse.Create(AMessageClass: TMessageClass;
  AMessageCategory: TMessageCategory; AMessageType: TMessageType);
begin
  inherited;

end;

function TPaymentResponse.CreateDefaultResponseMessagePayload(
  AResponse: TResponse): TMessagePayload;
begin
  raise Exception.Create('Not Implemented');
end;

end.
