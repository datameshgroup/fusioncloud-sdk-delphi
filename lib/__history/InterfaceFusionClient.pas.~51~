unit InterfaceFusionClient;

interface

uses System.Threading, DataMeshGroup.Fusion.SaleToPOIRequest,
  DataMeshGroup.Fusion.MessagePayload, InterfaceMessageParser,
  DataMeshGroup.Fusion.Types, DataMeshGroup.Fusion.LoginRequest,
  DataMeshGroup.Fusion.LoginResponse, DataMeshGroup.Fusion.LogLevel,
  System.TimeSpan, DataMeshGroup.Fusion.LogEventArgs,
  DataMeshGroup.Fusion.ResponseMessagePayloadEventArgs,
  DataMeshGroup.Fusion.LogoutResponse,
  DataMeshGroup.Fusion.CardAcquisitionResponse,
  DataMeshGroup.Fusion.PaymentResponse,
  DataMeshGroup.Fusion.ReconciliationResponse,
  DataMeshGroup.Fusion.DisplayRequest,
  DataMeshGroup.Fusion.TransactionStatusResponse;

type
  // events
  TEventOnLog = procedure(out AEventArgs: TLogEventArgs) of object;
  TEventConnect = procedure of object;
  TEventOnLoginResponse = function(): TMessagePayloadEventArgs<TLoginResponse> of object;
  TEventOnLogoutResponse = function(): TMessagePayloadEventArgs<TLogoutResponse> of object;
  TEventOnCardAcquisitionResponse = function(): TMessagePayloadEventArgs<TCardAcquisitionResponse> of object;
  TEventOnPaymentResponse = function(): TMessagePayloadEventArgs<TPaymentResponse> of object;
  TEventOnReconciliationResponse = function(): TMessagePayloadEventArgs<TReconciliationResponse> of object;
  TEventOnDisplayRequest = function(): TMessagePayloadEventArgs<TDisplayRequest> of object;
  TEventOnTransactionStatusResponse = function(): TMessagePayloadEventArgs<TTransactionStatusResponse> of object;

  IFusionClient = interface
  ['{0F952F88-2741-43C2-B8CF-BA593A42F8B0}']
    /// <summary>
    /// Connects to the <see cref="URL"/>, or <see cref="CustomURL"/> if <see cref="URL"/> is <see cref="URL"/>
    /// </summary>
    function Connect(ATask: ITask): Boolean;

    /// <summary>
    /// Disconnects and releases resources
    /// </summary>
    procedure Disconnect(ATask: ITask);

    /// <summary>
    /// Send a request. serviceId will default to a unique value. cancellationToken will default to 60 seconds.
    /// </summary>
    /// <param name="requestMessage">Payload to send</param>
    /// <returns>The resulting <see cref="SaleToPOIMessage"/> wrapper. Useful for extracting the ServiceId used in the request</returns>
    /// <exception cref="MessageFormatException">An error occured converting the request to JSON</exception>
    /// <exception cref="TaskCanceledException">A timeout occured sending the request</exception>
    /// <exception cref="NetworkException">A network error occured sending the request</exception>
    function Send(ARequestMessage: TMessagePayload): TSaleToPOIMessage; overload;

    /// <summary>
    /// Send a request. cancellationToken will be set to a default value.
    /// </summary>
    /// <param name="requestMessage">Payload to send</param>
    /// <param name="serviceID">ServiceId sent in the header</param>
    /// <returns>The resulting <see cref="SaleToPOIMessage"/> wrapper. Useful for extracting the ServiceId used in the request</returns>
    /// <exception cref="MessageFormatException">An error occured converting the request to JSON</exception>
    /// <exception cref="TaskCanceledException">A timeout occured sending the request</exception>
    /// <exception cref="NetworkException">A network error occured sending the request</exception>
    function SendMessage(ARequestMessage: TMessagePayload;
      AserviceID: string): TSaleToPOIMessage; overload;

    /// <summary>
    /// Send a request. serviceId will default to a unique value.
    /// </summary>
    /// <param name="requestMessage">Payload to send</param>
    /// <param name="cancellationToken">Cancellation token used for the request</param>
    /// <returns>The resulting <see cref="SaleToPOIMessage"/> wrapper. Useful for extracting the ServiceId used in the request</returns>
    /// <exception cref="MessageFormatException">An error occured converting the request to JSON</exception>
    /// <exception cref="TaskCanceledException">A timeout occured sending the request</exception>
    /// <exception cref="NetworkException">A network error occured sending the request</exception>
    function SendMessage(ARequestMessage: TMessagePayload): TSaleToPOIMessage; overload;

    /// <summary>
    /// Send a request.
    /// </summary>
    /// <param name="requestMessage">Payload to send</param>
    /// <param name="serviceID">ServiceId sent in the header</param>
    /// <param name="ensureConnectedAndLoginComplete">If true, will attempt to connect (if required) and send a login (if required) instead of throwing an exception</param>
    /// <param name="cancellationToken">Cancellation token used for the request</param>
    /// <returns>The resulting <see cref="SaleToPOIMessage"/> wrapper. Useful for extracting the ServiceId used in the request</returns>
    /// <exception cref="MessageFormatException">An error occured converting the request to JSON</exception>
    /// <exception cref="TaskCanceledException">A timeout occured sending the request</exception>
    /// <exception cref="NetworkException">A network error occured sending the request</exception>
    function SendMessage(ARequestMessage: TMessagePayload; AServiceID: string;
      AEnsureConnectedAndLoginComplete: Boolean): TSaleToPOIMessage; overload;

    /// <summary>
    /// Awaits the next response message from the host. Timeout set to <see cref="DefaultTimeout"/>
    /// </summary>
    /// <returns>A response message (if one is avaialble) or null, if none are available</returns>
    /// <exception cref="InvalidOperationException">Raised when a call is made to <see cref="RecvAsync"/> whilst 'ResponseMessage' events have been subscribed to</exception>
    /// <exception cref="TimeoutException">A timeout occured awaiting a response</exception>
    /// <exception cref="NetworkException">A network error occured awaiting a response</exception>
    function RecvMessage: TMessagePayload; overload;

    /// <summary>
    /// Awaits the next response message from the host.
    /// </summary>
    /// <param name="cancellationToken">Override the default timeout</param>
    /// <returns>A response message (if one is avaialble) or null, if none are available</returns>
    /// <exception cref="InvalidOperationException">Raised when a call is made to <see cref="RecvAsync"/> whilst 'ResponseMessage' events have been subscribed to</exception>
    /// <exception cref="TimeoutException">A timeout occured awaiting a response</exception>
    /// <exception cref="NetworkException">A network error occured awaiting a response</exception>
//    function RecvMessage(ACancellationToken: TCancellationToken): TMessagePayload; overload;

    /// <summary>
    /// Waits for a specified response message type. Discards all other response types.
    /// </summary>
    /// <typeparam name="T">The type of message to await. Must be of type <see cref="MessagePayload"/></typeparam>
    /// <param name="cancellationToken"></param>
    /// <returns>A response message of type 'T', or null if an unknown response was received</returns>
    /// <exception cref="InvalidOperationException">Raised when a call is made to <see cref="RecvAsync"/> whilst 'ResponseMessage' events have been subscribed to</exception>
    /// <exception cref="TimeoutException">A timeout occured awaiting a response</exception>
    /// <exception cref="NetworkException">A network error occured awaiting a response</exception>
//    Task<T> RecvAsync<T>(System.Threading.CancellationToken cancellationToken) where T : MessagePayload;

    /// <summary>
    /// Sends a request, and then waits for a specified response message type. Discards all other response types. Timeout set to <see cref="DefaultTimeout"/>
    /// </summary>
    /// <typeparam name="T">The type of message to await. Must be of type <see cref="MessagePayload"/></typeparam>
    /// <param name="requestMessage">The payload to send</param>
    /// <returns>A response message of type 'T', or null if an unknown response was received</returns>
    /// <exception cref="InvalidOperationException">Raised when a call is made to <see cref="RecvAsync"/> whilst 'ResponseMessage' events have been subscribed to</exception>
    /// <exception cref="TimeoutException">A timeout occured awaiting a response</exception>
    /// <exception cref="NetworkException">A network error occured awaiting a response</exception>
    function RecvMessage(ARequestMessage: TMessagePayload): TMessagePayload; overload;

    /// <summary>
    /// Sends a request, and then waits for a specified response message type. Discards all other response types.
    /// </summary>
    /// <typeparam name="T">The type of message to await. Must be of type <see cref="MessagePayload"/></typeparam>
    /// <param name="requestMessage">The payload to send</param>
    /// <param name="cancellationToken">The token used to handle timeouts</param>
    /// <returns>A response message of type 'T', or null if an unknown response was received</returns>
    /// <exception cref="InvalidOperationException">Raised when a call is made to <see cref="RecvAsync"/> whilst 'ResponseMessage' events have been subscribed to</exception>
    /// <exception cref="TimeoutException">A timeout occured awaiting a response</exception>
    /// <exception cref="NetworkException">A network error occured awaiting a response</exception>
//    Task<T> SendRecvAsync<T>(MessagePayload requestMessage, System.Threading.CancellationToken cancellationToken) where T : MessagePayload;

    function GetMessageParser: IMessageParser;
    procedure SetMessageParser(AMessageParser: IMessageParser);

    function GetServiceID: string;
    procedure SetServiceID(AServiceID: string);

    function GetSaleID: string;
    procedure SetSaleID(ASaleID: string);

    function GetPOIID: string;
    procedure SetPOIID(APOIID: string);

    function GetKEK: string;
    procedure SetKEK(AKEK: string);

    function GetUnifyURL: TUnifyURL;
    procedure SetUnifyURL(AUnifyURL: TUnifyURL);

    function GetCustomURL: string;
    procedure SetCustomURL(ACustomURL: string);

    function GetUnifyRootCA: TUnifyRootCA;
    procedure SetUnifyRootCA(AUnifyURL: TUnifyRootCA);

    function GetCustomRootCA: string;
    procedure SetCustomRootCA(ACustomRootCA: string);

    function GetLoginRequest: TLoginRequest;
    procedure SetLoginRequest(ALoginRequest: TLoginRequest);

    function GetLoginResponse: TLoginResponse;
    procedure SetLoginResponse(ALoginResponse: TLoginResponse);

    function GetReceiveBufferSize: Integer;
    procedure SetReceiveBufferSize(AReceiveBufferSize: Integer);

    function GetLogLevel: TLogLevel;
    procedure SetLogLevel(ALogLevel: TLogLevel);

    function GetDefaultTimeout: TTimeSpan;
    procedure SetDefaultTimeout(ADefaultTimeout: TTimeSpan);

    function GetDefaultHeartbeatTimeout: TTimeSpan;
    procedure SetDefaultHeartbeatTimeout(ADefaultHeartbeatTimeout: TTimeSpan);

    function GetIsEventModeEnabled: Boolean;

    function GetEventOnLog: TEventOnLog;
    procedure SetEventOnLog(AEventOnLog: TEventOnLog);

    function GetEventOnConnect: TEventConnect;
    procedure SetEventOnConnect(AEventOnConnect: TEventConnect);

    function GetEventOnConnectError: TEventConnect;
    procedure SetEventOnConnectError(AEventOnConnectError: TEventConnect);

    function GetEventOnDisconnect: TEventConnect;
    procedure SetEventOnDisconnect(AEventOnDisconnect: TEventConnect);

    function GetEventOnLoginResponse: TEventOnLoginResponse;
    procedure SetEventOnLoginResponse(AEventOnLoginResponse: TEventOnLoginResponse);

    function GetEventOnLogoutResponse: TEventOnLogoutResponse;
    procedure SetEventOnLogoutResponse(AEventOnLogoutResponse: TEventOnLogoutResponse);

    function GetEventOnCardAcquisitionResponse: TEventOnCardAcquisitionResponse;
    procedure SetEventOnCardAcquisitionResponse(AEventOnCardAcquisitionResponse: TEventOnCardAcquisitionResponse);

    function GetEventOnPaymentResponse: TEventOnPaymentResponse;
    procedure SetEventOnPaymentResponse(AEventOnPaymentResponse: TEventOnPaymentResponse);

    function GetEventOnReconciliationResponse: TEventOnReconciliationResponse;
    procedure SetEventOnReconciliationResponse(AEventOnReconciliationResponse: TEventOnReconciliationResponse);

    function GetEventOnDisplayRequest: TEventOnDisplayRequest;
    procedure SetEventOnDisplayRequest(AEventOnDisplayRequest: TEventOnDisplayRequest);

    function GetEventOnTransactionStatusResponse: TEventOnTransactionStatusResponse;
    procedure SetEventOnTransactionStatusResponse(AEventOnTransactionStatusResponse: TEventOnTransactionStatusResponse);

    {$REGION 'Properties'}

    /// <summary>
    /// Parser for converting request/response messages to bytes
    /// </summary>
    property MessageParser: IMessageParser read GetMessageParser
      write SetMessageParser;

    /// <summary>
    /// ServiceID of the last message sent
    /// </summary>
    property ServiceID: string read GetServiceID write SetServiceID;

    /// <summary>
    /// SaleID provided by DataMesh
    /// </summary>
    property SaleID: string read GetSaleID write SetSaleID;

    /// <summary>
    /// POIID provided by DataMesh
    /// </summary>
    property POIID: string read GetPOIID write SetPOIID;

    /// <summary>
    /// KEK provided by DataMesh
    /// </summary>
    property KEK: string read GetKEK write SetKEK;

    /// <summary>
    /// The URL of the Unify service to connect to.
    /// </summary>
    property URL: TUnifyURL read GetUnifyURL write SetUnifyURL;

    /// <summary>
    /// The custom URL string to use if <see cref="URL"/> is set to 'Custom'
    /// </summary>
    property CustomURL: string read GetCustomURL write SetCustomURL;

    /// <summary>
    /// The RootCA of the Unify service to connect to.
    /// </summary>
    property RootCA: TUnifyRootCA read GetUnifyRootCA write SetUnifyRootCA;

    /// <summary>
    /// The custom RootCA string to use if <see cref="RootCA"/> is set to 'Custom'
    /// </summary>
    property CustomRootCA: string read GetCustomRootCA write SetCustomRootCA;

    /// <summary>
    /// The default login request to be sent by <see cref="IFusionClient"/> if a login is required
    /// </summary>
    property LoginRequest: TLoginRequest read GetLoginRequest
      write SetLoginRequest;

    /// <summary>
    /// The login response returned as a part of an auto-login
    /// </summary>
    property LoginResponse: TLoginResponse read GetLoginResponse
      write SetLoginResponse;

    /// <summary>
    /// Byte size of the receive buffer
    /// </summary>
    property ReceiveBufferSize: Integer read GetReceiveBufferSize
      write SetReceiveBufferSize;// 1Kb

    /// <summary>
    /// Level of logging which should be returned in the OnLog event. Default is <see cref="LogLevel.None"/>
    /// </summary>
    property LogLevel: TLogLevel read GetLogLevel write SetLogLevel;

    /// <summary>
    /// Default amount of time we wait for responses from the switch. Default is 90 seconds.
    /// </summary>
    property DefaultTimeout: TTimeSpan read GetDefaultTimeout
      write SetDefaultTimeout;

    /// <summary>
    /// Default amount of time between websocket ping/pong heartbeats. Default is 15 seconds.
    /// </summary>
    property DefaultHeartbeatTimeout: TTimeSpan read GetDefaultHeartbeatTimeout
      write SetDefaultHeartbeatTimeout;

    /// <summary>
    /// Indicates if event mode has been enabled. This is set when <see cref="OnLoginResponse"/> or
    /// <see cref="OnPaymentResponse"/> events have been subscribed to. When events mode is enabled,
    /// responses will be returned to the owner via <see cref="OnLoginResponse"/> and
    /// <see cref="OnPaymentResponse"/> events, and all requests to <see cref="RecvAsync"/> will
    /// throw an <see cref="InvalidOperationException"/>
    /// </summary>
    property IsEventModeEnabled: Boolean read GetIsEventModeEnabled;

    {$ENDREGION}

    {$REGION 'Events'}

    /// <summary>
    /// Fired when a log event occurs which is at or above <see cref="LogLevel"/>
    /// </summary>
    property OnLog: TEventOnLog read GetEventOnLog write SetEventOnLog;

    /// <summary>
    /// Fired when the socket connects.
    /// </summary>
    property OnConnect: TEventConnect read GetEventOnConnect
      write SetEventOnConnect;

    /// <summary>
    /// Fired when a socket connection was attempted, but failed
    /// </summary>
    property OnConnectError: TEventConnect read GetEventOnConnectError
      write SetEventOnConnectError;

    /// <summary>
    /// Fired when the socket disconnects.
    /// </summary>
    property OnDisconnect: TEventConnect read GetEventOnDisconnect
      write SetEventOnDisconnect;

    /// <summary>
    /// Fired when a <see cref="LoginResponse"/> is received. Subscribing to this event will enable <see cref="IsEventModeEnabled"/>
    /// </summary>
    property OnLoginResponse: TEventOnLoginResponse read GetEventOnLoginResponse
      write SetEventOnLoginResponse;

    /// <summary>
    /// Fired when a <see cref="LogoutResponse"/> is received. Subscribing to this event will enable <see cref="IsEventModeEnabled"/>
    /// </summary>
    property OnLogoutResponse: TEventOnLogoutResponse read GetEventOnLogoutResponse
      write SetEventOnLogoutResponse;

    /// <summary>
    /// Fired when a <see cref="CardAcquisitionResponse"/> is received. Subscribing to this event will enable <see cref="IsEventModeEnabled"/>
    /// </summary>
    property OnCardAcquisitionResponse: TEventOnCardAcquisitionResponse
      read GetEventOnCardAcquisitionResponse write SetEventOnCardAcquisitionResponse;

    /// <summary>
    /// Fired when a <see cref="PaymentResponse"/> is received. Subscribing to this event will enable <see cref="IsEventModeEnabled"/>
    /// </summary>
    property OnPaymentResponse: TEventOnPaymentResponse
      read GetEventOnPaymentResponse write SetEventOnPaymentResponse;

    /// <summary>
    /// Fired when a <see cref="ReconciliationResponse"/> is received. Subscribing to this event will enable <see cref="IsEventModeEnabled"/>
    /// </summary>
    property OnReconciliationResponse: TEventOnReconciliationResponse
      read GetEventOnReconciliationResponse write SetEventOnReconciliationResponse;

    /// <summary>
    /// Fired when a <see cref="DisplayRequest"/> is received. Subscribing to this event will enable <see cref="IsEventModeEnabled"/>
    /// </summary>
    property OnDisplayRequest: TEventOnDisplayRequest
      read GetEventOnDisplayRequest write SetEventOnDisplayRequest;

    /// <summary>
    /// Fired when a <see cref="TransactionStatusResponse"/> is received. Subscribing to this event will enable <see cref="IsEventModeEnabled"/>
    /// </summary>
    property OnTransactionStatusResponse: TEventOnTransactionStatusResponse
      read GetEventOnTransactionStatusResponse write SetEventOnTransactionStatusResponse;

    {$ENDREGION}
  end;

implementation

end.
